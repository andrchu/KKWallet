package com.vip.wallet.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CARD_PKG".
*/
public class CardPkgDao extends AbstractDao<CardPkg, Long> {

    public static final String TABLENAME = "CARD_PKG";

    /**
     * Properties of entity CardPkg.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PrivateKey = new Property(1, String.class, "privateKey", false, "PRIVATE_KEY");
        public final static Property Address = new Property(2, String.class, "address", false, "ADDRESS");
        public final static Property IsMain = new Property(3, boolean.class, "isMain", false, "IS_MAIN");
        public final static Property ChainType = new Property(4, int.class, "chainType", false, "CHAIN_TYPE");
    };


    public CardPkgDao(DaoConfig config) {
        super(config);
    }
    
    public CardPkgDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CARD_PKG\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PRIVATE_KEY\" TEXT," + // 1: privateKey
                "\"ADDRESS\" TEXT," + // 2: address
                "\"IS_MAIN\" INTEGER NOT NULL ," + // 3: isMain
                "\"CHAIN_TYPE\" INTEGER NOT NULL );"); // 4: chainType
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CARD_PKG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CardPkg entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String privateKey = entity.getPrivateKey();
        if (privateKey != null) {
            stmt.bindString(2, privateKey);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(3, address);
        }
        stmt.bindLong(4, entity.getIsMain() ? 1L: 0L);
        stmt.bindLong(5, entity.getChainType());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CardPkg entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String privateKey = entity.getPrivateKey();
        if (privateKey != null) {
            stmt.bindString(2, privateKey);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(3, address);
        }
        stmt.bindLong(4, entity.getIsMain() ? 1L: 0L);
        stmt.bindLong(5, entity.getChainType());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CardPkg readEntity(Cursor cursor, int offset) {
        CardPkg entity = new CardPkg( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // privateKey
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // address
            cursor.getShort(offset + 3) != 0, // isMain
            cursor.getInt(offset + 4) // chainType
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CardPkg entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPrivateKey(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAddress(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIsMain(cursor.getShort(offset + 3) != 0);
        entity.setChainType(cursor.getInt(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CardPkg entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CardPkg entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
