package com.vip.wallet.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TOKEN".
*/
public class TokenDao extends AbstractDao<Token, Long> {

    public static final String TABLENAME = "TOKEN";

    /**
     * Properties of entity Token.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ContractAddress = new Property(1, String.class, "contractAddress", false, "CONTRACT_ADDRESS");
        public final static Property Decimals = new Property(2, int.class, "decimals", false, "DECIMALS");
        public final static Property TokenName = new Property(3, String.class, "tokenName", false, "TOKEN_NAME");
        public final static Property IconUrl = new Property(4, String.class, "iconUrl", false, "ICON_URL");
        public final static Property FileName = new Property(5, String.class, "fileName", false, "FILE_NAME");
        public final static Property IsSelect = new Property(6, boolean.class, "isSelect", false, "IS_SELECT");
    };


    public TokenDao(DaoConfig config) {
        super(config);
    }
    
    public TokenDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TOKEN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CONTRACT_ADDRESS\" TEXT," + // 1: contractAddress
                "\"DECIMALS\" INTEGER NOT NULL ," + // 2: decimals
                "\"TOKEN_NAME\" TEXT," + // 3: tokenName
                "\"ICON_URL\" TEXT," + // 4: iconUrl
                "\"FILE_NAME\" TEXT," + // 5: fileName
                "\"IS_SELECT\" INTEGER NOT NULL );"); // 6: isSelect
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TOKEN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Token entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String contractAddress = entity.getContractAddress();
        if (contractAddress != null) {
            stmt.bindString(2, contractAddress);
        }
        stmt.bindLong(3, entity.getDecimals());
 
        String tokenName = entity.getTokenName();
        if (tokenName != null) {
            stmt.bindString(4, tokenName);
        }
 
        String iconUrl = entity.getIconUrl();
        if (iconUrl != null) {
            stmt.bindString(5, iconUrl);
        }
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(6, fileName);
        }
        stmt.bindLong(7, entity.getIsSelect() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Token entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String contractAddress = entity.getContractAddress();
        if (contractAddress != null) {
            stmt.bindString(2, contractAddress);
        }
        stmt.bindLong(3, entity.getDecimals());
 
        String tokenName = entity.getTokenName();
        if (tokenName != null) {
            stmt.bindString(4, tokenName);
        }
 
        String iconUrl = entity.getIconUrl();
        if (iconUrl != null) {
            stmt.bindString(5, iconUrl);
        }
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(6, fileName);
        }
        stmt.bindLong(7, entity.getIsSelect() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Token readEntity(Cursor cursor, int offset) {
        Token entity = new Token( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // contractAddress
            cursor.getInt(offset + 2), // decimals
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // tokenName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // iconUrl
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // fileName
            cursor.getShort(offset + 6) != 0 // isSelect
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Token entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setContractAddress(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDecimals(cursor.getInt(offset + 2));
        entity.setTokenName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIconUrl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFileName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIsSelect(cursor.getShort(offset + 6) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Token entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Token entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
